import os
import struct
import numpy as np
from PIL import Image, ImageDraw
import shutil

root_folder_path = "/Users/torbjornfries/Desktop/Slutkurs/croptailor/oat_images/Additional_data_with_labels"

def read_seed(start_byte,out_hex):
    """
    This function reads the coordinates and some attributes of __one__  seed in an image from a .tbin file generated by
    SmartGrain.

    Inputs:
        start_byte: The first byte to start reading for the current seed
        out_hex: The full raw hexadecimal file, containing all seeds.
    Output:
        seed: a dictionary containing the fields
        ["Centroid", "IS (intersection?)", "Length", "width", "Area", "PL", "Circularity", "Contour"]
        , where Contour contains the coordinates of the pixels at the contour of the seed.
        new_start: The byte to start reading the next seed.
    """
    vals = []
    line = out_hex[start_byte:start_byte+48]
    for i in range(len(line) // 4):
        hexval = "".join(line[i * 4:i * 4 + 4][::-1])
        decimal_val = struct.unpack("!l", bytes.fromhex(hexval))[0]
        vals.append(decimal_val)

    vals2 = np.reshape(vals, [6, 2])
    # Bytes 48 through  52 are zeroes.

    # Next are a bunch of properties of the seed as computed by SmartGrain, described below, and stored in attrib.
    # Attributes = ["Centroid", "IS (intersection?)", "Length", "width", "Area", "PL", "Circularity"]
    line = out_hex[start_byte+52:start_byte+52+100]
    attrib = []
    for i in range(len(line) // 8):
        hexval = "".join(line[i * 8:i * 8 + 8][::-1])
        decimal_val = struct.unpack("!d", bytes.fromhex(hexval))[0]
        attrib.append(decimal_val)

    # Read the number of points defining the outline of the seed.
    line = out_hex[start_byte+304:start_byte+308]
    for i in range(len(line) // 4):
        hexval = "".join(line[i * 4:i * 4 + 4][::-1])
        decimal_val = struct.unpack("!l", bytes.fromhex(hexval))[0]
        n_points = decimal_val

    # Read the coordinate of the seeds.
    line = out_hex[start_byte+308:start_byte+308 + ((n_points ) * 3 * 4)]
    coords = []
    for i in range((n_points) * 3):
        hexval = "".join(line[i * 4:i * 4 + 4][::-1])
        decimal_val = struct.unpack("!l", bytes.fromhex(hexval))[0]
        coords.append(decimal_val)

    coords2 = np.reshape(coords, [n_points, 3])

    # Compute at which byte to start reading the next seed in the image.
    new_start = start_byte+308 + ((n_points ) * 3 * 4)

    # Store the seed attributes as a dictionary.
    seed = {}
    seed["Centroid"] = np.array([attrib[0], attrib[1]])
    seed["Intersection"] = np.array([attrib[2], attrib[3]])
    seed["Length"] = np.array([attrib[4]])
    seed["Width"] = np.array([attrib[5]])
    seed["Area"] = np.array([attrib[6]])
    seed["PL"] = np.array([attrib[7]])
    seed["Circularity"] = np.array([attrib[8]])
    seed["Contour"] = coords2

    return  seed, new_start


def process_file(file, file_number, image_folder):
    seeds = []
    start_byte = 120

    try:
        with open(file, "rb") as f:
            buff = f.read()
        out_hex = ['{:02X}'.format(b) for b in buff]

        while start_byte < len(out_hex):
            seed, start_byte = read_seed(start_byte=start_byte, out_hex=out_hex)
            seeds.append(seed)
    except Exception as e:
        print(f"Error reading {file}: {e}")

    seeds = [seed for seed in seeds if 200 < seed["Area"] < 100000]

    image_filename = os.path.basename(file)[2:-5] + '.JPG'
    original_image_path = os.path.join(os.path.dirname(file), image_filename)
    original_image = Image.open(original_image_path)
    resized_image = original_image.resize((600, 400))
    mask_folder = os.path.join(image_folder, 'masks')
    os.makedirs(mask_folder, exist_ok=True)

    for idx, seed in enumerate(seeds):
        mask_image = Image.new("RGB", (600, 400), color="black")
        mask_draw = ImageDraw.Draw(mask_image)
        seed_contour = seed["Contour"]
        seed_points = [(point[0], point[1]) for point in seed_contour]

        if len(seed_points) >= 2:
            seed_points_resized = [(point[0] / original_image.width * 600, point[1] / original_image.height * 400) for point in seed_points]
            mask_draw.polygon(seed_points_resized, fill="white")
            mask_image.save(os.path.join(mask_folder, f"{file_number}_{idx}.png")) #jpg???
        else:
            print(f"skippi'n seed {idx} in {file_number} since it was bad")

    image_subfolder = os.path.join(image_folder, 'images')
    os.makedirs(image_subfolder, exist_ok=True)
    resized_image.save(os.path.join(image_subfolder, f"{file_number}.jpg"))

def process_files_in_folder(folder_path):
    image_found = any(file.endswith('.JPG') for file in os.listdir(folder_path))
    tbin_found = any(file.endswith('.tbin') for file in os.listdir(folder_path))

    if not (image_found or tbin_found):
        print(f"Skippi'n: {folder_path}. No image or tBIN in this folder")
        return
    
    for file_name in os.listdir(folder_path):
        if file_name.endswith('.tbin'):
            if not any((filename == file_name[2:-5]+".JPG") for filename in os.listdir(folder_path)):
                print(f"Skippi'n: {folder_path}. No image in this folder")
                return

    for file_name in os.listdir(folder_path):
        if file_name.endswith('.tbin'):
            file_path = os.path.join(folder_path, file_name)
            file_number = file_name[2:-5]
            image_folder = os.path.join(destination_folder, file_number)

            os.makedirs(image_folder, exist_ok=True)
            image_subfolder = os.path.join(image_folder, 'images')
            os.makedirs(image_subfolder, exist_ok=True)

            image_filename = f"{file_number}.jpg"
            original_image_path = os.path.join(folder_path, image_filename)
            try:
                shutil.copy(original_image_path, os.path.join(image_subfolder, image_filename))
            except FileNotFoundError as e:
                print(f"Error reading {original_image_path}: {e}")

            process_file(file_path, file_number, image_folder)

def process_files_in_all_folders(root_folder):
    for folder_name in os.listdir(root_folder):
        folder_path = os.path.join(root_folder, folder_name)
        if os.path.isdir(folder_path):
            process_files_in_folder(folder_path)

destination_folder = "/Users/torbjornfries/Desktop/Slutkurs/mrcnn4TF_2/Mask-RCNN-TF2/Transfer-learning/Images_With_Masks"
os.makedirs(destination_folder, exist_ok=True)

process_files_in_all_folders(root_folder_path)